"use client";

import { useState } from "react";

import { useAuthedAppUrl } from "@/hooks/use_authed_app_url";
import { Menu01Icon } from "@/icons/solid/menu-01";
import Link from "next/link";

import { Button } from "@/components/ui/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";

import {
  COMPANY_DEMO_FORM_URL,
  COMPANY_LOGIN_URL,
  COMPANY_NAME,
} from "@/lib/constants";
import { cn } from "@/lib/utils";
import { BrandingLogoType } from "./branding/branding_logo";

export const Header = () => {
  const authedAppUrl = useAuthedAppUrl();

  const [isMobileNavOpen, setIsMobileNavOpen] = useState(false);

  return (
    <>
      <div className="sticky top-0 z-50">
        <header className={cn("h-20 flex items-center px-32 bg-white")}>
          <div className="flex justify-between w-full row-start-1 items-center col-start-1">
            <Link href="/" className="flex-shrink-0 rounded-lg">
              <BrandingLogoType className="h-[28px] sm:h-[33px]" />
            </Link>
            <Link href="/" className="flex-shrink-0 rounded-lg">
              <svg viewBox="0 0 48 11" fill="none" width="120">
                <path
                  xmlns="http://www.w3.org/2000/svg"
                  d="M2.33523 6.16477V10H0.792614V3.45455H2.26705V4.56676H2.34375C2.49432 4.20028 2.73438 3.90909 3.06392 3.69318C3.39631 3.47727 3.80682 3.36932 4.29545 3.36932C4.74716 3.36932 5.14063 3.46591 5.47585 3.65909C5.81392 3.85227 6.07528 4.1321 6.25994 4.49858C6.44744 4.86506 6.53977 5.30966 6.53693 5.83239V10H4.99432V6.07102C4.99432 5.63352 4.88068 5.29119 4.65341 5.04403C4.42898 4.79687 4.1179 4.6733 3.72017 4.6733C3.45028 4.6733 3.21023 4.73295 3 4.85227C2.79261 4.96875 2.62926 5.13778 2.50994 5.35938C2.39347 5.58097 2.33523 5.84943 2.33523 6.16477ZM9.76023 10.1278C9.12102 10.1278 8.56705 9.98722 8.0983 9.70597C7.62955 9.42472 7.26591 9.03125 7.00739 8.52557C6.7517 8.01989 6.62386 7.42898 6.62386 6.75284C6.62386 6.0767 6.7517 5.48437 7.00739 4.97585C7.26591 4.46733 7.62955 4.07244 8.0983 3.79119C8.56705 3.50994 9.12102 3.36932 9.76023 3.36932C10.3994 3.36932 10.9534 3.50994 11.4222 3.79119C11.8909 4.07244 12.2531 4.46733 12.5088 4.97585C12.7673 5.48437 12.8966 6.0767 12.8966 6.75284C12.8966 7.42898 12.7673 8.01989 12.5088 8.52557C12.2531 9.03125 11.8909 9.42472 11.4222 9.70597C10.9534 9.98722 10.3994 10.1278 9.76023 10.1278ZM9.76875 8.89205C10.1153 8.89205 10.4051 8.79687 10.6381 8.60653C10.871 8.41335 11.0443 8.15483 11.158 7.83097C11.2744 7.5071 11.3327 7.14631 11.3327 6.74858C11.3327 6.34801 11.2744 5.9858 11.158 5.66193C11.0443 5.33523 10.871 5.07528 10.6381 4.8821C10.4051 4.68892 10.1153 4.59233 9.76875 4.59233C9.41364 4.59233 9.11818 4.68892 8.88239 4.8821C8.64943 5.07528 8.47472 5.33523 8.35824 5.66193C8.2446 5.9858 8.18778 6.34801 8.18778 6.74858C8.18778 7.14631 8.2446 7.5071 8.35824 7.83097C8.47472 8.15483 8.64943 8.41335 8.88239 8.60653C9.11818 8.79687 9.41364 8.89205 9.76875 8.89205ZM16.2744 3.45455V4.64773H12.5116V3.45455H16.2744ZM13.4406 1.88636H14.9832V8.03125C14.9832 8.23864 15.0144 8.39773 15.0769 8.50852C15.1423 8.61648 15.2275 8.69034 15.3326 8.73011C15.4377 8.76989 15.5542 8.78977 15.682 8.78977C15.7786 8.78977 15.8667 8.78267 15.9462 8.76847C16.0286 8.75426 16.0911 8.74148 16.1337 8.73011L16.3937 9.93608C16.3113 9.96449 16.1934 9.99574 16.04 10.0298C15.8894 10.0639 15.7048 10.0838 15.486 10.0895C15.0996 10.1009 14.7516 10.0426 14.442 9.91477C14.1323 9.78409 13.8866 9.58239 13.7048 9.30966C13.5258 9.03693 13.4377 8.69602 13.4406 8.28693V1.88636ZM18.248 10.1321C17.8332 10.1321 17.4597 10.0582 17.1273 9.91051C16.7977 9.75994 16.5364 9.53835 16.3432 9.24574C16.1528 8.95312 16.0577 8.59233 16.0577 8.16335C16.0577 7.79403 16.1259 7.48864 16.2622 7.24716C16.3986 7.00568 16.5847 6.8125 16.8205 6.66761C17.0562 6.52273 17.3219 6.41335 17.6173 6.33949C17.9156 6.26278 18.2239 6.20739 18.542 6.1733C18.9256 6.13352 19.2366 6.09801 19.4753 6.06676C19.7139 6.03267 19.8872 5.98153 19.9952 5.91335C20.106 5.84233 20.1614 5.73295 20.1614 5.58523V5.55966C20.1614 5.23864 20.0662 4.99006 19.8759 4.81392C19.6855 4.63778 19.4114 4.54972 19.0534 4.54972C18.6756 4.54972 18.3759 4.6321 18.1543 4.79688C17.9355 4.96165 17.7878 5.15625 17.7111 5.38068L16.2707 5.17614C16.3844 4.77841 16.5719 4.44602 16.8332 4.17898C17.0946 3.90909 17.4142 3.70739 17.792 3.57386C18.1699 3.4375 18.5875 3.36932 19.0449 3.36932C19.3602 3.36932 19.6741 3.40625 19.9866 3.48011C20.2991 3.55398 20.5847 3.67614 20.8432 3.84659C21.1017 4.0142 21.3091 4.2429 21.4653 4.53267C21.6244 4.82244 21.704 5.18466 21.704 5.61932V10H20.221V9.10085H20.1699C20.0761 9.28267 19.944 9.45312 19.7736 9.61222C19.606 9.76847 19.3943 9.89489 19.1386 9.99148C18.8858 10.0852 18.5889 10.1321 18.248 10.1321ZM18.6486 8.99858C18.9582 8.99858 19.2267 8.9375 19.454 8.81534C19.6812 8.69034 19.856 8.52557 19.9781 8.32102C20.1031 8.11648 20.1656 7.89347 20.1656 7.65199V6.88068C20.1173 6.92045 20.0349 6.95739 19.9185 6.99148C19.8048 7.02557 19.677 7.0554 19.5349 7.08097C19.3929 7.10653 19.2523 7.12926 19.1131 7.14915C18.9739 7.16903 18.8531 7.18608 18.7509 7.20028C18.5207 7.23153 18.3148 7.28267 18.133 7.35369C17.9511 7.42472 17.8077 7.52415 17.7026 7.65199C17.5974 7.77699 17.5449 7.93892 17.5449 8.13778C17.5449 8.42188 17.6486 8.63636 17.856 8.78125C18.0634 8.92614 18.3276 8.99858 18.6486 8.99858ZM24.4841 10.1151C23.9699 10.1151 23.5097 9.98295 23.1034 9.71875C22.6972 9.45455 22.3761 9.07102 22.1403 8.56818C21.9045 8.06534 21.7866 7.45455 21.7866 6.7358C21.7866 6.00852 21.906 5.39489 22.1446 4.89489C22.3861 4.39205 22.7114 4.01278 23.1205 3.7571C23.5295 3.49858 23.9855 3.36932 24.4884 3.36932C24.8719 3.36932 25.1872 3.43466 25.4344 3.56534C25.6815 3.69318 25.8776 3.84801 26.0224 4.02983C26.1673 4.20881 26.2795 4.37784 26.3591 4.53693H26.423V1.27273H27.9699V10H26.4528V8.96875H26.3591C26.2795 9.12784 26.1645 9.29687 26.0139 9.47585C25.8634 9.65199 25.6645 9.80256 25.4173 9.92756C25.1702 10.0526 24.8591 10.1151 24.4841 10.1151ZM24.9145 8.84943C25.2412 8.84943 25.5196 8.76136 25.7497 8.58523C25.9798 8.40625 26.1545 8.15767 26.2739 7.83949C26.3932 7.52131 26.4528 7.15057 26.4528 6.72727C26.4528 6.30398 26.3932 5.93608 26.2739 5.62358C26.1574 5.31108 25.9841 5.06818 25.754 4.89489C25.5267 4.72159 25.2469 4.63494 24.9145 4.63494C24.5707 4.63494 24.2838 4.72443 24.0537 4.90341C23.8236 5.08239 23.6503 5.32955 23.5338 5.64489C23.4173 5.96023 23.3591 6.32102 23.3591 6.72727C23.3591 7.13636 23.4173 7.50142 23.5338 7.82244C23.6531 8.14062 23.8278 8.39205 24.058 8.5767C24.2909 8.75852 24.5764 8.84943 24.9145 8.84943ZM34.2603 3.45455L31.9293 10H30.2248L27.8938 3.45455H29.5387L31.043 8.31676H31.1112L32.6197 3.45455H34.2603ZM34.1278 10V3.45455H35.6704V10H34.1278ZM34.9033 2.52557C34.659 2.52557 34.4488 2.4446 34.2727 2.28267C34.0965 2.1179 34.0085 1.92045 34.0085 1.69034C34.0085 1.45739 34.0965 1.25994 34.2727 1.09801C34.4488 0.933238 34.659 0.850852 34.9033 0.850852C35.1505 0.850852 35.3607 0.933238 35.534 1.09801C35.7102 1.25994 35.7982 1.45739 35.7982 1.69034C35.7982 1.92045 35.7102 2.1179 35.534 2.28267C35.3607 2.4446 35.1505 2.52557 34.9033 2.52557ZM38.9118 10.1278C38.2584 10.1278 37.6973 9.98438 37.2285 9.69744C36.7626 9.41051 36.4033 9.0142 36.1504 8.50852C35.9004 8 35.7754 7.41477 35.7754 6.75284C35.7754 6.08807 35.9033 5.50142 36.1589 4.9929C36.4146 4.48153 36.7754 4.08381 37.2413 3.79972C37.7101 3.51278 38.2641 3.36932 38.9033 3.36932C39.4345 3.36932 39.9047 3.46733 40.3138 3.66335C40.7257 3.85653 41.0538 4.13068 41.2982 4.4858C41.5425 4.83807 41.6817 5.25 41.7158 5.72159H40.2413C40.1817 5.40625 40.0396 5.14347 39.8152 4.93324C39.5936 4.72017 39.2967 4.61364 38.9246 4.61364C38.6092 4.61364 38.3322 4.69886 38.0936 4.86932C37.855 5.03693 37.6689 5.27841 37.5354 5.59375C37.4047 5.90909 37.3393 6.28693 37.3393 6.72727C37.3393 7.1733 37.4047 7.55682 37.5354 7.87784C37.666 8.19602 37.8493 8.44176 38.0851 8.61506C38.3237 8.78551 38.6035 8.87074 38.9246 8.87074C39.1518 8.87074 39.355 8.82812 39.5339 8.7429C39.7158 8.65483 39.8678 8.52841 39.9899 8.36364C40.1121 8.19886 40.1959 7.99858 40.2413 7.76278H41.7158C41.6788 8.22585 41.5425 8.63636 41.3067 8.99432C41.0709 9.34943 40.7499 9.62784 40.3436 9.82955C39.9374 10.0284 39.4601 10.1278 38.9118 10.1278ZM44.6802 10.1278C44.0239 10.1278 43.4572 9.99148 42.9799 9.71875C42.5055 9.44318 42.1404 9.05398 41.8847 8.55114C41.629 8.04545 41.5012 7.45028 41.5012 6.76562C41.5012 6.09233 41.629 5.50142 41.8847 4.9929C42.1433 4.48153 42.504 4.08381 42.9671 3.79972C43.4302 3.51278 43.9742 3.36932 44.5992 3.36932C45.0026 3.36932 45.3833 3.43466 45.7413 3.56534C46.1021 3.69318 46.4202 3.89205 46.6958 4.16193C46.9742 4.43182 47.193 4.77557 47.3521 5.19318C47.5112 5.60795 47.5907 6.10227 47.5907 6.67614V7.14915H42.2256V6.10938H46.112C46.1092 5.81392 46.0452 5.55114 45.9202 5.32102C45.7952 5.08807 45.6205 4.90483 45.3961 4.77131C45.1745 4.63778 44.916 4.57102 44.6205 4.57102C44.3052 4.57102 44.0282 4.64773 43.7896 4.80114C43.5509 4.9517 43.3648 5.15057 43.2313 5.39773C43.1006 5.64205 43.0339 5.91051 43.031 6.20312V7.1108C43.031 7.49148 43.1006 7.81818 43.2398 8.09091C43.379 8.3608 43.5737 8.56818 43.8237 8.71307C44.0737 8.85511 44.3663 8.92614 44.7015 8.92614C44.9259 8.92614 45.1291 8.89489 45.3109 8.83239C45.4927 8.76705 45.6504 8.67188 45.7839 8.54688C45.9174 8.42188 46.0183 8.26705 46.0864 8.08239L47.5268 8.24432C47.4359 8.625 47.2626 8.95739 47.0069 9.24148C46.7541 9.52273 46.4302 9.74148 46.0353 9.89773C45.6404 10.0511 45.1887 10.1278 44.6802 10.1278Z"
                  fill="white"
                />
              </svg>
            </Link>

            <div className="flex gap-2 items-center">
              <Popover
                open={isMobileNavOpen}
                onOpenChange={(isOpen) => setIsMobileNavOpen(isOpen)}
              >
                <PopoverTrigger asChild>
                  <Button variant="ghost" size="icon" className="lg:hidden">
                    <Menu01Icon className="h-4 w-4" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent forceMount align="end" className="lg:hidden">
                  <Nav
                    className="flex-col gap-4"
                    onLinkClick={() => setIsMobileNavOpen(false)}
                  />
                </PopoverContent>
              </Popover>
            </div>
          </div>
          <div className="flex items-center justify-center h-full space-x-10 ml-32">
            <Nav className="hidden lg:flex gap-10 " />
            {authedAppUrl ? (
              <Button asChild variant="outline" size="sm">
                <Link href={authedAppUrl}>
                  <span>Open {COMPANY_NAME}</span>
                </Link>
              </Button>
            ) : (
              <>
                <Button asChild size={"lg"}>
                  <Link href={COMPANY_DEMO_FORM_URL}>
                    <span className="text-lg">Get started</span>
                  </Link>
                </Button>
                {/* <Button asChild size={"lg"} variant={"pill"}>
                  <a href={COMPANY_DEMO_FORM_URL}>
                    <span className="px-0.5">Get started</span>
                  </a>
                </Button> */}
              </>
            )}
          </div>
        </header>
      </div>
    </>
  );
};

const NavLinks = [
  // {
  //   text: "Blog",
  //   href: "/blog",
  // },
  // {
  //   text: "Careers",
  //   href: "/careers",
  // },
  // {
  //   text: "Docs",
  //   href: "/docs",
  // },
  {
    text: "Login",
    href: COMPANY_LOGIN_URL,
  },
];

const Nav = ({
  className,
  onLinkClick,
}: {
  className?: string;
  onLinkClick?: () => void;
}) => {
  return (
    <nav>
      <ul className={cn("flex text-xs md:text-sm items-center", className)}>
        {NavLinks.map(({ text, href }) => (
          <li key={href}>
            <HeaderLink href={href} text={text} />
          </li>
        ))}
      </ul>
    </nav>
  );
};

const HeaderLink = ({
  icon,
  text,
  href,
  className,
  onClick,
}: {
  icon?: React.ElementType<Omit<React.SVGProps<SVGSVGElement>, "ref">>;
  text: string;
  href: string;
  className?: string;
  onClick?: () => void;
}) => {
  const Icon = icon;

  return (
    <Link
      href={href}
      className={cn(
        `group-hover:text-primary-12 transition-colors pointer-events-auto before:content-["${text.replaceAll(
          " ",
          "_"
        )}"] before:block before:overflow-hidden before:invisible before:h-0`,
        className
      )}
      onClick={onClick}
    >
      <div className="flex items-center flex-row space-x-2 group">
        {Icon && (
          <Icon className="h-5 w-5 text-gray-9 group-hover:text-gray-12 transition-colors" />
        )}
        <span
          className={cn(
            "group-hover:text-primary-10 text-gray-12 group-hover:opacity-100 font-medium text-lg transition-all whitespace-nowrap",
            className
          )}
        >
          {text}
        </span>
      </div>
    </Link>
  );
};
