"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from datetime import timedelta
from pathlib import Path

import django_stubs_ext
import json_fix
from loguru import logger

from config.loguru import LoguruLogger

django_stubs_ext.monkeypatch()

json_fix.fix_it()

from corsheaders.defaults import default_headers  # noqa: E402

from .environment import Environment  # noqa: E402

Environment.load()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("secret_key", "django-insecure-m#r6u^nb^og)q^ie&@80@%ntta=&i9rys%a$4+z%@(p=)qu&^%")

PYTHON_ENV = os.environ.get("PYTHON_ENV", "development")


# Testing
TEST_RUNNER = "config.tests.StructhqTestRunner"


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = PYTHON_ENV == "development"


if DEBUG:
    ALLOWED_HOSTS = ["*"]
else:
    ALLOWED_HOSTS = [
        "127.0.0.1",
        "0.0.0.0",
        "localhost",
        "app.structhqhq.com",
        "api.structhqhq.com",
        "docs.structhqhq.com",
        "www.structhqhq.com",
        "demo.structhqhq.com",
        "structhqhq.com",
        "supplier-onboarding.gravitysketch.structhqhq.com",
        "zond.dev",
        "www.zond.dev",
    ]


# Application definition

INSTALLED_APPS = [
    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    # Third-party apps
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "rest_framework_simplejwt",
    "django_extensions",
    "django_celery_beat",
    "django_celery_results",
    "drf_spectacular",
    "silk",
    # Structhq apps
    "structhq",
]


if PYTHON_ENV == "development":
    INSTALLED_APPS.append("nplusone.ext.django")


DEBUG_PROPAGATE_EXCEPTIONS = True

# STORAGES:

AWS_REGION_NAME = os.getenv("aws:region_name")
AWS_S3_REGION_NAME = AWS_REGION_NAME

if not DEBUG:
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_STORAGE_BUCKET_NAME = os.getenv("aws:storage_bucket_name")
    AWS_S3_ENDPOINT_URL = f"https://s3.{AWS_REGION_NAME}.amazonaws.com"

AWS_QUERYSTRING_AUTH = True


REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": (
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
        "djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer",
    ),
    "DEFAULT_PARSER_CLASSES": (
        "djangorestframework_camel_case.parser.CamelCaseFormParser",
        "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework_simplejwt.authentication.JWTAuthentication",),
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_PAGINATION_CLASS": "structhq.lib.variable_size_pagination.VariableSizePagination",
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DATETIME_FORMAT": "iso-8601",
    "PAGE_SIZE": 500,
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Structhq API",
    "DESCRIPTION": "Structhq is the knowledge graph for internal LLM tools",
    "VERSION": "0.1.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SERVE_AUTHENTICATION": None,
    "SERVERS": [
        {
            "url": "https://api.structhqhq.com",
            "description": "Structhq API",
        },
    ],
    "SECURITY": [],
    "PREPROCESSING_HOOKS": ["config.openapi.preprocessing_filter_spec"],
}


AUTH_USER_MODEL = "structhq.User"

REST_USE_JWT = True

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=90),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
}


MIDDLEWARE = [
    "structhq.middleware.RequestLogMiddleware",
    "structhq.middleware.HealthCheckMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "djangorestframework_camel_case.middleware.CamelCaseMiddleWare",
    "structhq.middleware.workspace_middleware.WorkspaceMiddleware",
    "structhq_api.middleware.api_key_middleware.APIKeyMiddleware",
    "silk.middleware.SilkyMiddleware",
]

if PYTHON_ENV == "development":
    MIDDLEWARE = [
        "nplusone.ext.django.NPlusOneMiddleware",
    ] + MIDDLEWARE

CORS_ALLOW_HEADERS = (
    *default_headers,
    "Traceparent",
    "traceparent",
    "X-Workspace-Id",
)

CORS_EXPOSE_HEADERS = (
    *default_headers,
    "Traceparent",
    "traceparent",
    "X-Workspace-Id",
)

CORS_ALLOWED_ORIGINS = [
    # Localhost URLs
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:4000",
    "http://127.0.0.1:4000",
    "http://localhost:4010",
    "http://127.0.0.1:4010",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://localhost:3333",
    "http://127.0.0.1:3333",
    "http://localhost:3020",
    "http://127.0.0.1:3020",
    # Production URLs
    "https://app.structhqhq.com",
    "https://demo.structhqhq.com",
    "https://api.structhqhq.com",
    "https://docs.structhqhq.com",
    "https://www.structhqhq.com",
    "https://structhqhq.com",
    "https://supplier-onboarding.gravitysketch.structhqhq.com",
    "https://zond.dev",
    "https://www.zond.dev",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("databases:default:name"),
        "USER": os.getenv("databases:default:user"),
        "PASSWORD": os.getenv("databases:default:password"),
        "HOST": os.getenv("databases:default:host"),
        "PORT": os.getenv("databases:default:port"),
    },
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ.get("redis:endpoint", "redis://"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}


CACHE_TTL = 60 * 15  # 15 minutes


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/London"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


STATIC_URL = os.getenv("structhq:backend_url") + "/static/"
MEDIA_URL = os.getenv("structhq:backend_url") + "/media/"

STATIC_ROOT = os.path.join(BASE_DIR, "static")
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

if PYTHON_ENV in ["production", "staging"]:
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 7776000
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True

USE_X_FORWARDED_HOST = True


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

PREPEND_WWW = False


logger_format = (
    "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}:{function}:{line}</cyan> - <level>{message}</level> | <blue>{extra}</blue>"
)

logger.remove()
logger.add(sys.stderr, format=logger_format, serialize=PYTHON_ENV != "development")

if PYTHON_ENV == "development":
    NPLUSONE_LOGGER = LoguruLogger(logger)
    NPLUSONE_WHITELIST = [
        {"model": "admin.LogEntry", "field": "user"},
    ]

# Celery config
CELERY_RESULT_BACKEND = "django-db"
CELERY_TIMEZONE = "Europe/London"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

if PYTHON_ENV == "production":
    CELERY_WORKER_SEND_TASK_EVENTS = True
    CELERY_TASK_SEND_SENT_EVENT = True


SILKY_MAX_RECORDED_REQUESTS_CHECK_PERCENT = 0.01
SILKY_MAX_RECORDED_REQUESTS = 100_000

# Profiling
if PYTHON_ENV == "development" and False:
    SILKY_PYTHON_PROFILER = True
    SILKY_PYTHON_PROFILER_BINARY = True
    SILKY_INTERCEPT_PERCENT = 100
